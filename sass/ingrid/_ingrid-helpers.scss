//
// INGRID THE WONDROUS
// www.wearewondrous.com
// Internal mixins/function by WONDROUS LLC
// Licensed under MIT Open Source
//

//
// TODO: Need to be reordered and commented! (SAS)
//

@function add-node($map, $label, $prop) {
  @return map-merge($map, (#{$label}: $prop));
}

@function calc-rem($value) {
  @return rem-calc($value);
}

@function rem($value) {
  @return rem-calc($value);
}

@function get-gutter($breakpoint) {
  @return rem-calc(map-get($grid-column-gutter, "#{$breakpoint}"));
}

@mixin transform($value) {
  transform: $value;
}

@mixin calc($property, $value) {
  #{$property}: calc(#{$value});
}

@mixin transition($transition...) {
  transition: $transition;
}

@mixin transition-property($property...) {
  transition-property: $property;
}

@mixin transition-duration($duration...) {
  transition-duration: $duration;
}

@mixin transition-timing-function($timing...) {
  transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
  transition-delay: $delay;
}

@mixin calc-font($font-size) {
  font-size: calc-rem($font-size);
  line-height: calc-rhythm($font-size);
}

@mixin link-states {
  &:active,
  &:focus,
  &:hover {
    @content;
  }
}

@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  @include transform(translateX(-50%) translateY(-50%));
}

// @m reset-ul
//
// This is the mixin to reset default behaviout of ul/ol.
//
// - __$inline__ - true/false (default: false)
//
// __Samples:__
// * <code>@include reset-ul;</code>
// * <code>@include reset-ul(true);</code>
//
// Styleguide 1.99999

@mixin reset-ul($inline: false) {
  list-style: none;
  padding: 0;
  margin: 0;

  @if $inline {
    > li {
      display: inline-block;
    }
  }
}

// Typography helpers
//
// Here you can find all the mixins and function to create text elements in rhythmus
//
// Styleguide 1.12

// @m generate-font-from-map($proporties-map)
//
// Generate font from proporties provided in map.
//
// * Use the rhythm function for the line-heigh, margin-top, margin-bottom
// * If the values of are provided in px or without unit - it's transform to the rem
//
// **Dependency on the rhythm function**
//
// Compatibility untested
//
// Styleguide 1.12.1
@mixin generate-font-from-map($proporties-map) {
  @each $property in map-keys($proporties-map) {
    @if $property == "font-size" {
      font-size: rem-calc(map-get($proporties-map, font-size));
    } @else if $property == "line-height" and map-get($proporties-map, $property) == calc {
      line-height: rhythm(lines-for-font-size(map-get($proporties-map, font-size)));
    } @else if index("line-height" "padding-top" "padding-bottom" "margin-top" "margin-bottom", $property) {
      #{$property}: rhythm(map-get($proporties-map, $property));
    } @else {
      #{$property}: map-get($proporties-map, $property);
    }
  }
}

// @m create-rwd-font($styles-map)
//
// Generate the responsive web font using the function generate-font-from-map().
//
// <code>$style-map-name</code> - map of style for different media query ranges. In key "default" is define the default style for font.
// It mus be defined at least this one key. Each first level key of this map is another map of keys, which represent proporties of css code.
//
// __Example__
//
// <code>@include create-rwd-font("font style name");</code>
//
// Compatibility untested
//
// Styleguide 1.12.2
@mixin create-rwd-font($font-style-name) {
  $styles-map: map-get($font-styles-map, #{$font-style-name});
  @include generate-font-from-map(map-get($styles-map, default));
  $breakpoints-map: map-remove($styles-map, default);
  @each $breakpoint-key, $breakpoint-data in $breakpoints-map {
    // TODO: breakpoint is no more used, because of the new version of breakpoint mixin in Foundation 6
    $breakpoint: map-get($breakpoint-data, breakpoint);
    @include breakpoint($breakpoint-key){
      @include generate-font-from-map(map-remove($breakpoint-data, breakpoint));
    }
  }
}
